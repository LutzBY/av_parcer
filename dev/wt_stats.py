import tkinter as tk
from tkinter import scrolledtext
import pyperclip
import re
import pandas as pd
import sys

# –ö—É–¥–∞
file_path = r"C:\Users\lutzb\Desktop\wt_stats\data.xlsx"

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
def parse_battle_stats():
    imported_game_log = pyperclip.paste()
    if not imported_game_log.strip():
        print("‚ùå –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç. –°–∫–æ–ø–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è –∏ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        return None

    # --- –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–±–µ–¥–∞ / –ü–æ—Ä–∞–∂–µ–Ω–∏–µ ---
    result_match = re.search(r'(–ü–æ–±–µ–¥–∞|–ü–æ—Ä–∞–∂–µ–Ω–∏–µ) –≤ –º–∏—Å—Å–∏–∏', imported_game_log)
    result = result_match.group(1) if result_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # --- –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏ ---
    mission_match = re.search(r'–º–∏—Å—Å–∏–∏\s+"([^"]+)"', imported_game_log)
    mission = mission_match.group(1) if mission_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # --- –ò—Ç–æ–≥–æ: –°–õ, –°–û–ò (FRP), –û–ò (RP) ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ ---
    total_matches = re.findall(r'–ò—Ç–æ–≥–æ:\s*(\d+)\s*–°–õ,\s*(\d+)\s*–°–û–ò,\s*(\d+)\s*–û–ò', imported_game_log)
    if not total_matches:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è '–ò—Ç–æ–≥–æ'.")
        return None

    # –ë–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ï–ï –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏)
    last_match = total_matches[-1]
    total_sl = int(last_match[0])   # Silver Lions
    total_frp = int(last_match[1])  # Free Research Points
    total_rp = int(last_match[2])   # Research Points

    # --- –û—á–∫–∏ –º–∏—Å—Å–∏–∏ ---
    mission_points = re.findall(r'(\d+)\s*–æ—á–∫(?:–æ|–∞|–æ–≤)\s*–º–∏—Å—Å–∏–∏', imported_game_log)
    total_mission_points = sum(int(x) for x in mission_points)

    # --- –°–µ—Å—Å–∏—è ---
    session_match = re.search(r'–°–µ—Å—Å–∏—è:\s*([a-f0-9]+)', imported_game_log)
    session_id = session_match.group(1) if session_match else None
    if not session_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ session_id.")
        return None

    # --- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (%) ---
    activity_match = re.search(r'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\s*(\d+)%', imported_game_log)
    activity_percent = int(activity_match.group(1)) if activity_match else None

    # --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ ---
    vehicles = set()

    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" ‚Äî –∏—â–µ–º —Ç–µ–∫—Å—Ç –¥–æ "–¶–∏—Ñ—Ä—ã + (–ü–ê)"
    pattern_active = r'^\s*(.+?)\s+\d+\s*\+\s*$$–ü–ê$$'
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "–í—Ä–µ–º—è –∏–≥—Ä—ã" ‚Äî –∏—â–µ–º —Ç–µ–∫—Å—Ç –¥–æ "95% ... 4:51"
    pattern_game = r'^\s*(.+?)\s+\d+%.*?\d+:\d+'

    active_time_matches = re.findall(pattern_active, imported_game_log, re.MULTILINE)
    game_time_matches = re.findall(pattern_game, imported_game_log, re.MULTILINE)
    
    all_vehicles = active_time_matches + game_time_matches

    for v in all_vehicles:
        cleaned = re.sub(r'\s+', ' ', v.strip())
        # –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ", "–ò—Ç–æ–≥–æ")
        if cleaned and not re.match(r'^[0-9\[\]"]', cleaned) and len(cleaned) > 1:
            vehicles.add(cleaned)

    vehicles = ", ".join(sorted(vehicles)) if vehicles else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    return {
        'session_id': session_id,
        'vehicles': vehicles,
        'total_sl': total_sl,
        'total_frp': total_frp,
        'total_rp': total_rp,
        'total_mission_points': total_mission_points,
        'result': result,
        'mission': mission,
        'activity_percent': activity_percent,
    }

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —ç–∫—Å–µ–ª—å
def save_to_excel(data, file_path):
    
    columns = [
        'session_id', 'vehicles', 'total_sl', 'total_frp', 'total_rp',
        'total_mission_points', 'result', 'mission', 'activity_percent'
    ]

    try:
        df = pd.read_excel(file_path, engine='openpyxl')
    except (FileNotFoundError, ValueError):
        df = pd.DataFrame(columns=columns)

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–∫–∏–º session_id, –µ—Å–ª–∏ –µ—Å—Ç—å
    df = df[df['session_id'] != data['session_id']]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    new_row = pd.DataFrame([data], columns=columns)
    df = pd.concat([df, new_row], ignore_index=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    df.to_excel(file_path, index=False, engine='openpyxl')
    print(f"\n ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['session_id']}")

# –û–∫–Ω–æ Tkinter
class WTApp:
    def __init__(self, root):
        self.root = root
        self.root.title("WT Parser")
        root.geometry('%dx%d+%d+%d' % (400, 325, 1500, 650)) # —Ä–∞–∑–º–µ—Ä - —à, –≤, –ø–æ–ª–æ–∂–µ–Ω–∏–µ - —à, –≤ (3520 + 1080 )
        self.root.resizable(True, True)
        self.root.attributes('-topmost', True) # –ø–æ–≤–µ—Ä—Ö
        self.root.attributes('-alpha', 0.90) # –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        
        # –ú–µ—Ç–∫–∞: –ø–æ—Å–ª–µ–¥–Ω—è—è –º–∏—Å—Å–∏—è
        self.last_mission_label = tk.Label(
            root,
            text="–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏—Å—Å–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            font=("Arial", 9),
            fg="gray",
            wraplength=330,
            anchor="w",
            justify="left"
        )
        self.last_mission_label.pack(pady=(10, 5), padx=10, fill='x')

        # –ö–Ω–æ–ø–∫–∞
        self.button = tk.Button(
            root,
            text="üìù –ó–∞–ø–∏—Å–∞—Ç—å",
            font=("Arial", 12),
            command=self.on_button_click
        )
        self.button.pack(pady=10)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –≤—ã–≤–æ–¥–æ–º
        self.text_area = scrolledtext.ScrolledText(
            root,
            wrap=tk.WORD,
            font=("Consolas", 10),
            state='disabled',
            bg="white",
            fg="black",
            padx=10,
            pady=10
        )
        self.text_area.pack(expand=True, fill='both', padx=10, pady=5)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ print –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        sys.stdout = TextRedirector(self.text_area)

    def on_button_click(self):
        self.text_area.configure(state='normal')
        self.text_area.delete(1.0, tk.END)
        self.text_area.configure(state='disabled')
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞...")
        
        data = parse_battle_stats()
        if data:
            print("\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–æ:")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            mission = data['mission']
            self.last_mission_label.config(
            text=f"{mission}",
            fg="black"
            ) # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç

            # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            for k, v in data.items():
                print(f"\n{k}: {v}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —ç–∫—Å–µ–ª—å
            save_to_excel(data, file_path)

        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")

# –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ print()
class TextRedirector:
    def __init__(self, widget):
        self.widget = widget

    def write(self, text):
        if text.strip():  # —á—Ç–æ–±—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            self.widget.configure(state='normal')
            self.widget.insert(tk.END, text)
            self.widget.see(tk.END)
            self.widget.configure(state='disabled')
            self.widget.update_idletasks()  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    def flush(self):
        pass  # —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å stdout

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    root = tk.Tk()
    app = WTApp(root)
    root.mainloop()